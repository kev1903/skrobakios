import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { CalendarIcon, X } from 'lucide-react';
import { format } from 'date-fns';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface RFQFormProps {
  projectId: string;
  companyId: string;
  onSuccess: () => void;
  onCancel: () => void;
}

const TRADE_CATEGORIES = [
  'Earthworks',
  'Concrete',
  'Structural Steel',
  'Mechanical',
  'Electrical',
  'Plumbing',
  'HVAC',
  'Roofing',
  'Cladding',
  'Flooring',
  'Painting',
  'Landscaping',
  'Security',
  'IT & Communications',
  'General Construction',
  'Other'
];

const RFQ_STATUSES = [
  'RFQ Draft',
  'RFQ Issued',
  'Partially Received',
  'Fully Received',
  'Under Evaluation',
  'Recommended',
  'Approved',
  'Committed',
  'In Delivery',
  'Closed',
  'On Hold',
  'Cancelled',
  'Not Proceeding'
];

export const RFQForm: React.FC<RFQFormProps> = ({ 
  projectId, 
  companyId, 
  onSuccess, 
  onCancel 
}) => {
  const [loading, setLoading] = useState(false);
  const [dueDate, setDueDate] = useState<Date>();
  const [formData, setFormData] = useState({
    work_package: '',
    trade_category: '',
    scope_summary: '',
    status: 'RFQ Draft'
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.work_package.trim() || !formData.trade_category) {
      toast.error('Please fill in all required fields');
      return;
    }

    try {
      setLoading(true);

      const rfqData = {
        project_id: projectId,
        company_id: companyId,
        work_package: formData.work_package.trim(),
        trade_category: formData.trade_category,
        scope_summary: formData.scope_summary.trim() || null,
        status: formData.status,
        due_date: dueDate ? format(dueDate, 'yyyy-MM-dd') : null,
        rfq_number: '' // This will be auto-generated by the trigger
      };

      const { error } = await supabase
        .from('rfqs')
        .insert(rfqData);

      if (error) {
        console.error('Error creating RFQ:', error);
        toast.error('Failed to create RFQ');
        return;
      }

      toast.success('RFQ created successfully');
      onSuccess();
    } catch (error) {
      console.error('Error creating RFQ:', error);
      toast.error('Failed to create RFQ');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={true} onOpenChange={() => onCancel()}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Create New RFQ</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="work_package">Work Package *</Label>
              <Input
                id="work_package"
                placeholder="e.g., Foundation Works Package A"
                value={formData.work_package}
                onChange={(e) => handleInputChange('work_package', e.target.value)}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="trade_category">Trade Category *</Label>
              <Select 
                value={formData.trade_category} 
                onValueChange={(value) => handleInputChange('trade_category', value)}
                required
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select trade category" />
                </SelectTrigger>
                <SelectContent>
                  {TRADE_CATEGORIES.map(category => (
                    <SelectItem key={category} value={category}>
                      {category}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="scope_summary">Scope Summary</Label>
            <Textarea
              id="scope_summary"
              placeholder="Brief description of the work package scope..."
              value={formData.scope_summary}
              onChange={(e) => handleInputChange('scope_summary', e.target.value)}
              rows={3}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="status">Initial Status</Label>
              <Select 
                value={formData.status} 
                onValueChange={(value) => handleInputChange('status', value)}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {RFQ_STATUSES.map(status => (
                    <SelectItem key={status} value={status}>
                      {status}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Due Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button 
                    variant="outline" 
                    className="w-full justify-start text-left font-normal"
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {dueDate ? format(dueDate, 'PPP') : <span>Pick a date</span>}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={dueDate}
                    onSelect={setDueDate}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>

          <div className="flex gap-3 pt-6">
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
              disabled={loading}
              className="flex-1"
            >
              <X className="w-4 h-4 mr-2" />
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={loading}
              className="flex-1"
            >
              {loading ? 'Creating...' : 'Create RFQ'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};